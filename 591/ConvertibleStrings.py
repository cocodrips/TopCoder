import math
import string

import itertools

class ConvertibleStrings:
  def leastRemovals(self, A, B):
    candi = list(set(A + B))

    perms = itertools.permutations(candi)

    mini = 55
    for perm in perms:
      perm_d = {}
      for k, v in enumerate(perm):
        perm_d[candi[k]] = v
      mini = min(mini, self.count_diff(perm_d, A, B, mini))
      if mini == 0:
        return 0
    return mini

  def count_diff(self, d, A, B, mini):
    count = 0
    for k, v in enumerate(A):
      if d[A[k]] != B[k]:
        count += 1
        if count >= mini:
          return count
    return count




# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\"") + str(",") + str("\"") + str(p1) + str("\""))
	print(str("]"))
	obj = ConvertibleStrings()
	startTime = time.clock()
	answer = obj.leastRemovals(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p2))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = "DD"
p1 = "FF"
p2 = 0
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = "AAAA"
p1 = "ABCD"
p2 = 3
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = "AAIAIA"
p1 = "BCDBEE"
p2 = 3
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = "ABACDCECDCDAAABBFBEHBDFDDHHD"
p1 = "GBGCDCECDCHAAIBBFHEBBDFHHHHE"
p2 = 9
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Let X and Y be two strings of equal length, consisting of uppercase English letters only.
# The two strings are called convertible if there is a permutation P of the English alphabet with the following property:
# if each character c in the string X is replaced by the character P(c), we obtain the string Y.
# (In other words, X and Y are convertible iff the following holds: whenever two letters of X are equal, the corresponding two letters of Y must be equal, and vice versa.)
#
# For example, consider the string "ABCA".
# We can choose to replace each 'A' by a 'F', each 'B' by a 'B', and each 'C' by a 'G', obtaining the string "FBGF".
# Thus the strings "ABCA" and "FBGF" are convertible.
# The strings "ABCA" and "EFGH" are not convertible, because the two 'A's in the first string must correspond to the same letter in the second string.
# The strings "ABCA" and "EEEE" are not convertible, because different letters in the first string must correspond to different letters in the second string.
#
# You are given two strings A and B of the same length.
# These strings only contain English letters from 'A' to 'I', inclusive.
# (That is, only the first 9 letters of the alphabet are used.)
#
# You want to change A and B into two strings that are convertible.
# The only allowed change is to choose some indices (possibly none) and to remove the characters at those indices from each of the strings.
# (I.e., the removed characters must be at the same positions in both strings. For example, it is not allowed to only remove character 0 of A and character 3 of B.)
# For example, if A="ABAC", B="AHHA" and the chosen indices are 0 and 2, then the resulting strings will be "BC" and "HA".
# Our goal is to choose as few indices as possible, given that after the erasing we want to obtain two convertible strings.
# Compute and return the smallest possible number of chosen indices.
#
# 
# DEFINITION
# Class:ConvertibleStrings
# Method:leastRemovals
# Parameters:string, string
# Returns:integer
# Method signature:def leastRemovals(self, A, B):
# 
# 
# CONSTRAINTS
# -A will contain between 1 and 50 characters, inclusive.
# -A and B will be of the same length.
# -A will contain characters from 'A' to 'I' only.
# -B will contain characters from 'A' to 'I' only.
# 
# 
# EXAMPLES
# 
# 0)
# "DD"
# "FF"
# 
# Returns: 0
# 
# The given strings are convertible without any removals. Any mapping with 'D' mapped to 'F' changes A to B.
# 
# 1)
# "AAAA"
# "ABCD"
# 
# Returns: 3
# 
# We can choose any three indices.
# 
# 2)
# "AAIAIA"
# "BCDBEE"
# 
# Returns: 3
# 
# One possible triple of indices is (1, 2, 5) (0-based indices).
# 
# 
# 3)
# "ABACDCECDCDAAABBFBEHBDFDDHHD"
# "GBGCDCECDCHAAIBBFHEBBDFHHHHE"
# 
# Returns: 9
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

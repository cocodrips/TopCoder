import math
import string

class PerfectSequences:
    def fixIt(self, seq):
        
        return

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = PerfectSequences()
	startTime = time.clock()
	answer = obj.fixIt(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p1) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [1,3,4]
p1 = "Yes"
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = [1,2,3]
p1 = "No"
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = [1,4,2,4,2,4]
p1 = "No"
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = [1000000,1,1,1,1,2]
p1 = "Yes"
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

# ----- test 4 -----
p0 = [8]
p1 = "Yes"
all_right = KawigiEdit_RunTest(4, p0, True, p1) and all_right
# ------------------

# ----- test 5 -----
p0 = [2,0,2]
p1 = "No"
all_right = KawigiEdit_RunTest(5, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# A perfect sequence is a sequence such that all of its elements are non-negative integers and the product of all of them is equal to their sum. For example: {2,2}, {1,3,2} and {0,0,0,0} are perfect sequences and {4,5,6} and {0,2,-2} are not perfect sequences (4*5*6 is not equal to 4+5+6, and negative numbers are not allowed by the definition).
# 
# You are given a tuple (integer) seq. Return "Yes" if it is possible to change exactly one element of seq so that the resulting sequence is perfect. Otherwise, return "No".
# 
# 
# 
# DEFINITION
# Class:PerfectSequences
# Method:fixIt
# Parameters:tuple (integer)
# Returns:string
# Method signature:def fixIt(self, seq):
# 
# 
# CONSTRAINTS
# -seq will contain between 1 and 50 elements, inclusive.
# -Each element of seq will be between 0 and 1000000000 (10^9), inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1,3,4}
# 
# Returns: "Yes"
# 
# If we change the last element to 2, we have {1,3,2}.
# 1+3+2 = 1*3*2.
# 
# 1)
# {1,2,3}
# 
# Returns: "No"
# 
# This sequence is already perfect and it is not possible to change exactly one of its elements and keep it perfect.
# 
# 2)
# {1,4,2,4,2,4}
# 
# Returns: "No"
# 
# 
# 
# 3)
# {1000000,1,1,1,1,2}
# 
# Returns: "Yes"
# 
# It is possible to replace 1000000 with 6 to make the sequence become perfect.
# 
# 4)
# {8}
# 
# Returns: "Yes"
# 
# It is possible to change the first element to any non-negative number and the sequence will stay perfect.
# 
# 5)
# {2,0,2}
# 
# Returns: "No"
# 
# Note that {2,0,-2} is not considered a perfect sequence because negative numbers are not allowed by the definition.
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

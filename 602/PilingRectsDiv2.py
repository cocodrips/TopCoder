import math
import string

class PilingRectsDiv2:
  def getmax(self, X, Y, limit):

    xy = []
    for x, y in zip(X, Y):
      if x < y:
        xy.append((x, y))
      else:
        xy.append((y, x))

    xy.sort()

    print xy
    maxi = -1
    for i in xrange(len(xy)):
      prev = xy[i]
      if prev[0] * prev[1] < limit:
        continue
      count = 1
      for j in xrange(i + 1, len(xy)):
        c = xy[j]
        if min(prev[0], c[0]) * min(prev[1],c[1]) >= limit:
          count += 1
          prev = (min(prev[0], c[0]), min(prev[1],c[1]))
      maxi = max(maxi,count)

    return maxi


# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str(p2))
	print(str("]"))
	obj = PilingRectsDiv2()
	startTime = time.clock()
	answer = obj.getmax(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p3))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [1,2,3,1]
p1 = [3,2,4,4]
p2 = 3
p3 = 3
all_right = KawigiEdit_RunTest(0, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 1 -----
p0 = [4,7]
p1 = [7,4]
p2 = 25
p3 = 2
all_right = KawigiEdit_RunTest(1, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 2 -----
p0 = [10]
p1 = [10]
p2 = 9999
p3 = -1
all_right = KawigiEdit_RunTest(2, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 3 -----
p0 = [10]
p1 = [3]
p2 = 30
p3 = 1
all_right = KawigiEdit_RunTest(3, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 4 -----
p0 = [3,6,5,8,2,9,14]
p1 = [14,6,13,8,15,6,3]
p2 = 27
p3 = 4
all_right = KawigiEdit_RunTest(4, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 5 -----
p0 = [121,168,86,106,36,10,125,97,53,26,148,129,41,18,173,55,13,73,91,174,177,190,28,164,122,92,5,26,58,188,14,67,48,196,41,94,24,89,54,117,12,6,155,103,200,128,184,29,92,149]
p1 = [199,182,43,191,2,145,15,53,38,37,61,45,157,129,119,123,177,178,183,188,132,108,112,137,92,59,75,196,102,152,114,121,181,93,32,3,24,116,4,163,96,159,196,43,59,150,79,113,20,146]
p2 = 5345
p3 = 24
all_right = KawigiEdit_RunTest(5, p0, p1, p2, True, p3) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Snake Snuke has N rectangles cut out of paper.
# The rectangles are labeled 0 through N-1.
# You are given tuple (integer)s X and Y with N elements each.
# For each i, the sides of rectangle i have lengths X[i] and Y[i].
#
# Snake Snuke will choose some of his rectangles and place them onto a table, one rectangle at a time, in any order he likes.
# Each rectangle (except for the first one) must overlap the immediately previous one, so at the end Snuke will have a pile of rectangles.
# Snuke may rotate the rectangles, but once placed, the sides of each rectangle must be parallel to the sides of the table.
# (I.e., he may only swap the width and height of some rectangles he places.)
# After placing all the rectangles, Snuke computes the area that is covered by all N rectangles.
# (Formally, the area of their intersection.)
#
# You are also given an integer limit.
# The area computed by Snuke must be greater than or equal to limit.
#
# Return the largest positive R such that Snuke can select some R of his rectangles and place them in such a way that the area of their intersection is at least limit. If there is no such R, return -1 instead.
#
# 
# DEFINITION
# Class:PilingRectsDiv2
# Method:getmax
# Parameters:tuple (integer), tuple (integer), integer
# Returns:integer
# Method signature:def getmax(self, X, Y, limit):
# 
# 
# CONSTRAINTS
# -X and Y will contain between 1 and 50 elements, inclusive.
# -X and Y will contain the same number of elements.
# -Each element of X and Y will be between 1 and 200, inclusive.
# -limit will be between 1 and 40000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1,2,3,1}
# {3,2,4,4}
# 3
# 
# Returns: 3
# 
# He can choose rectangles 0, 2, and 3. These three rectangles can then be placed in such a way that both rectangle 2 and rectangle 3 cover rectangle 0 completely. For this placement, the area of their intersection will be exactly 3.
#
# 1)
# {4,7}
# {7,4}
# 25
# 
# Returns: 2
# 
# Note that he can rotate rectangles.
# 
# 2)
# {10}
# {10}
# 9999
# 
# Returns: -1
# 
# There is no possible choice.
# 
# 3)
# {10}
# {3}
# 30
# 
# Returns: 1
# 
# 
# 
# 4)
# {3,6,5,8,2,9,14}
# {14,6,13,8,15,6,3}
# 27
# 
# Returns: 4
# 
# 
# 
# 5)
# {121,168,86,106,36,10,125,97,53,26,148,129,41,18,173,55,13,73,91,174,177,190,28,164,122,92,5,26,58,188,14,67,48,196,41,94,24,89,54,117,12,6,155,103,200,128,184,29,92,149}
# {199,182,43,191,2,145,15,53,38,37,61,45,157,129,119,123,177,178,183,188,132,108,112,137,92,59,75,196,102,152,114,121,181,93,32,3,24,116,4,163,96,159,196,43,59,150,79,113,20,146}
# 5345
# 
# Returns: 24
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

import math
import string

class GrabbingTaxi:
  def minTime(self, tXs, tYs, gX, gY, walkTime, taxiTime):
    minTime = (abs(gX) + abs(gY)) * walkTime
    for x, y in zip(tXs, tYs):
      time = 0
      time += (abs(x) + abs(y)) * walkTime
      time += (abs(x - gX) + abs(y - gY)) * taxiTime
      minTime = min(time, minTime)
        
    return minTime

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, p3, p4, p5, hasAnswer, p6):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str(p2) + str(",") + str(p3) + str(",") + str(p4) + str(",") + str(p5))
	print(str("]"))
	obj = GrabbingTaxi()
	startTime = time.clock()
	answer = obj.minTime(p0, p1, p2, p3, p4, p5)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p6))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p6
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = []
p1 = []
p2 = 3
p3 = 2
p4 = 10
p5 = 2
p6 = 50
all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, True, p6) and all_right
# ------------------

# ----- test 1 -----
p0 = [-2,-2]
p1 = [0,-2]
p2 = -4
p3 = -2
p4 = 15
p5 = 3
p6 = 42
all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, True, p6) and all_right
# ------------------

# ----- test 2 -----
p0 = [3]
p1 = [0]
p2 = 5
p3 = 0
p4 = 10
p5 = 20
p6 = 50
all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, True, p6) and all_right
# ------------------

# ----- test 3 -----
p0 = [34,-12,1,0,21,-43,-98,11,86,-31]
p1 = [11,5,-68,69,-78,-49,-36,-2,1,70]
p2 = -97
p3 = -39
p4 = 47
p5 = 13
p6 = 2476
all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, True, p6) and all_right
# ------------------

# ----- test 4 -----
p0 = [82,-60,57,98,30,-67,84,-42,-100,62]
p1 = [-7,90,53,-56,-15,-87,22,-3,-61,-30]
p2 = 21
p3 = 15
p4 = 53
p5 = 2
p6 = 1908
all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, True, p6) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# You are walking in the city on a holiday. Suddenly, you are told to go to your office as soon as possible by your boss via cell phone. The city is infinite in size, with vertical streets located at every integer X value and horizontal streets located at every Y value. You are currently located at (0, 0) and your office is located at (gX, gY). There are some taxi stands in the city and their locations are (tXs[i], tYs[i]). You can either go to the office by foot or go to some taxi stand, get a taxi there and go to the office by taxi. It takes walkTime seconds to go along the street to proceed to a horizontally or vertically adjacent intersection by foot and it takes taxiTime seconds by a taxi.
# 
# 
# Return the least amount of time that it will take you to go to your office.
# 
# 
# DEFINITION
# Class:GrabbingTaxi
# Method:minTime
# Parameters:tuple (integer), tuple (integer), integer, integer, integer, integer
# Returns:integer
# Method signature:def minTime(self, tXs, tYs, gX, gY, walkTime, taxiTime):
# 
# 
# CONSTRAINTS
# -tXs will contain between 0 and 50 elements, inclusive.
# -tXs and tYs will contain the same number of elements.
# -Each element of tXs and tYs will be between -10000 and 10000, inclusive.
# -gX and gY will be between -10000 and 10000, inclusive.
# -walkTime and taxiTime will be between 1 and 1000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {}
# {}
# 3
# 2
# 10
# 2
# 
# Returns: 50
# 
# There are no taxi stands. You have to walk to the goal.
# 
# 1)
# {-2, -2}
# {0, -2}
# -4
# -2
# 15
# 3
# 
# Returns: 42
# 
# First, you walk to (-2, 0) and get a taxi. Then you go to the goal by it.
# 
# 2)
# {3}
# {0}
# 5
# 0
# 10
# 20
# 
# Returns: 50
# 
# taxiTime may be larger than walkTime.
# 
# 3)
# {34, -12, 1, 0, 21, -43, -98, 11, 86, -31}
# {11, 5, -68, 69, -78, -49, -36, -2, 1, 70}
# -97
# -39
# 47
# 13
# 
# Returns: 2476
# 
# 
# 
# 4)
# {82, -60, 57, 98, 30, -67, 84, -42, -100, 62}
# {-7, 90, 53, -56, -15, -87, 22, -3, -61, -30}
# 21
# 15
# 53
# 2
# 
# Returns: 1908
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

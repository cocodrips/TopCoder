import math
import string
import collections

class WinterAndCandies:
  def getNumber(self, type):
    type = list(type)
    type.sort()

    if type[0] != 1:
      return 0
    for i in xrange(len(type) - 1):
      if type[i+1] - type[i] > 1:
        type = type[:i+1]
        break

    if len(type) == 0:
      return 0

    c = collections.Counter(type)
    print c

    selects = 1

    for k, v in c.items():
      selects = selects * v

    batsu = 1
    for k, v in c.items():
      if k != 1:
        selects += batsu
        batsu *= v
        print selects
      else:
        batsu *= v




    return selects


# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = WinterAndCandies()
	startTime = time.clock()
	answer = obj.getNumber(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p1))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True

#



# ----- test 0 -----
p0 = [1,3,2]
p1 = 3
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = [1,1,2]
p1 = 4
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = [1,3,2,5,7,4,5,4]
p1 = 9
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = [1,1,2,2,3,3,4,4,5,5]
p1 = 62
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

# ----- test 4 -----
p0 = [2]
p1 = 0
all_right = KawigiEdit_RunTest(4, p0, True, p1) and all_right
# ------------------

# ----- test 4 -----
p0 = range(1, 50)
p1 = 49
all_right = KawigiEdit_RunTest(4, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# It's winter time!
# You have some candies arranged in a row and now you want to choose some of them and give them to your friend.
#
#
#
#
# You are given a tuple (integer) type.
# Each candy has a type, which is some positive integer.
# For each i, type[i] represents the type of i-th candy.
# You want to choose some non-empty subset of candies with the following property:
# if the number of candies you choose is K, their types must be precisely all the numbers from 1 to K, inclusive.
# Return the number of different ways to do that.
# (Two ways are considered different if there exists some candy that is chosen in only one of them.)
#
# 
# DEFINITION
# Class:WinterAndCandies
# Method:getNumber
# Parameters:tuple (integer)
# Returns:integer
# Method signature:def getNumber(self, type):
# 
# 
# NOTES
# -The answer will always fit in a signed 32-bit integer.
# 
# 
# CONSTRAINTS
# -type will contain between 1 and 50 elements, inclusive.
# -Each element of type will be between 1 and 50, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1, 3, 2}
# 
# Returns: 3
# 
# There are 7 possible non-empty subsets in this case:
# 
# 
# (1)
# 
# 
# (3)
# 
# 
# (2)
# 
# 
# (1, 3)
# 
# 
# (1, 2)
# 
# 
# (3, 2)
# 
# 
# (1, 3, 2)
# 
# 
# Out of them, only first, fifth and seventh are valid. Thus, the answer is 3.
# 
# 1)
# {1, 1, 2}
# 
# Returns: 4
# 
# Note that the chosen subset can never contain two elements with the same type.
# 
# 2)
# {1, 3, 2, 5, 7, 4, 5, 4}
# 
# Returns: 9
# 
# 
# 
# 3)
# {1, 1, 2, 2, 3, 3, 4, 4, 5, 5}
# 
# Returns: 62
# 
# 
# 
# 4)
# {2}
# 
# Returns: 0
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

import math
import string

class LittleElephantAndDouble:
    def getAnswer(self, A):
        m = max(A)
        for a in A:
            if not self.doubleUntilM(a, m):
                return 'NO'
        return 'YES'

    def doubleUntilM(self, a, m):
        print(a, m)
        while(a <= m):
            if a == m:
                return True
            a = a * 2
        return False

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = LittleElephantAndDouble()
	startTime = time.clock()
	answer = obj.getAnswer(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p1) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [1,2]
p1 = "YES"
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = [1,2,3]
p1 = "NO"
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = [4,8,2,1,16]
p1 = "YES"
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = [94,752,94,376,1504]
p1 = "YES"
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

# ----- test 4 -----
p0 = [148,298,1184]
p1 = "NO"
all_right = KawigiEdit_RunTest(4, p0, True, p1) and all_right
# ------------------

# ----- test 5 -----
p0 = [7,7,7,7]
p1 = "YES"
all_right = KawigiEdit_RunTest(5, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# Little Elephant from the Zoo of Lviv likes integers.
# 
# 
# 
# 
# You are given an tuple (integer) A. On a single turn, Little Elephant can double (i.e., multiply by 2) any element of A. He may double the same element more than once, if he wants to. He wants to obtain an array in which all elements are equal. Return "YES" (quotes for clarity) if it is possible to do that and "NO" otherwise.
# 
# 
# 
# DEFINITION
# Class:LittleElephantAndDouble
# Method:getAnswer
# Parameters:tuple (integer)
# Returns:string
# Method signature:def getAnswer(self, A):
# 
# 
# NOTES
# -The return value is case-sensitive. Make sure that you return the exact strings "YES" and "NO".
# 
# 
# CONSTRAINTS
# -A will contain between 1 and 50 elements, inclusive.
# -Each element of A will be between 1 and 1,000,000,000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1, 2}
# 
# Returns: "YES"
# 
# One possible way of making all elements equal is to double the element at index 0.
# 
# 1)
# {1, 2, 3}
# 
# Returns: "NO"
# 
# It's impossible to make all three elements equal in this case.
# 
# 2)
# {4, 8, 2, 1, 16}
# 
# Returns: "YES"
# 
# 
# 
# 3)
# {94, 752, 94, 376, 1504}
# 
# Returns: "YES"
# 
# 
# 
# 4)
# {148, 298, 1184}
# 
# Returns: "NO"
# 
# 
# 
# 5)
# {7, 7, 7, 7}
# 
# Returns: "YES"
# 
# 
# 
# END KAWIGIEDIT TESTING

#Powered by KawigiEdit-pfx 2.1.9!

import math
import string

class SlimeXSlimeRancher2:
    def train(self, attributes):
        sum = 0
        maxi = max(attributes)
        for a in attributes:
            sum += maxi - a

        return sum

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = SlimeXSlimeRancher2()
	startTime = time.clock()
	answer = obj.train(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p1))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [1,2,3]
p1 = 3
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = [5,5]
p1 = 0
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = [900,500,100]
p1 = 1200
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# You are playing a game titled Slime Rancher 2. You will be training slimes in this game.
# 
# 
# You have a slime-in-training. Associated with the slime are N attributes, numbered 0 through N-1, each represented by a positive integer. You are given tuple (integer) attributes containing N integers : the i-th integer is the initial value of the i-th attribute for the slime. After the training is complete, each of the slime's attributes will either stay the same or increase to some positive integer less than or equal to 999. None of the attributes will decrease in value. The weight of the training is defined as the sum of the differences between the final and initial values of all the attributes for the slime.
#
#
# You are a master slime breeder, and you're able to obtain any possible final values for a slime's attributes. This time, you would like to create a well-balanced slime. A slime is well-balanced if all of its attributes have equal values. What is the minimum possible weight of the training?

# DEFINITION
# Class:SlimeXSlimeRancher2
# Method:train
# Parameters:tuple (integer)
# Returns:integer
# Method signature:def train(self, attributes):
# 
# 
# CONSTRAINTS
# -attributes will contain between 2 and 50 elements, inclusive.
# -Each element of attributes will be between 1 and 999, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1,2,3}
# 
# Returns: 3
# 
# Train the slime such that all of its attributes are equal to 3. The total weight of the training is |3 - 1| + |3 - 2| + |3 - 3| = 3.
# 
# 1)
# {5,5}
# 
# Returns: 0
# 
# This slime is already well-balanced.
# 
# 2)
# {900,500,100}
# 
# Returns: 1200
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

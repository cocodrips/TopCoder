import math
import string

class BoundingBox:
    def smallestArea(self, X, Y):
        minS = 100000000000000000000
        X = list(X)
        Y = list(Y)
        mostR = -1000000000000000000
        mostL = 1000000000000000000
        mostT = -1000000000000000000
        mostD = 1000000000000000000

        for x, y in zip(X, Y):
            mostR = max(mostR, x)
            mostL = min(mostL, x)
            mostT = max(mostT, y)
            mostD = min(mostD, y)
        
        return abs((mostR - mostL) * (mostT - mostD))

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = BoundingBox()
	startTime = time.clock()
	answer = obj.smallestArea(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p2))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [0,1]
p1 = [1,0]
p2 = 1
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = [0,-2,-1]
p1 = [-1,-1,-2]
p2 = 2
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = [0,0,1,0,-1,2]
p1 = [0,1,2,-2,0,-1]
p2 = 12
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = [9,-88,-40,98,-55,41,-38]
p1 = [-65,56,-67,7,-58,33,68]
p2 = 25110
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = [-100, 100]
p1 = [-100, 100]
p2 = 40000
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Andrew drew a bunch of points on a sheet of graph paper.
# You are given the coordinates of these points in two tuple (integer)s: X and Y.
# That is, for each valid i, there is a point at the coordinates (X[i], Y[i]).
#
# Now Andrew wants to draw a rectangle.
# The sides of the rectangle must be parallel to the coordinate axes.
# (In other words, each side of the rectangle must be either horizontal or vertical.)
# Additionally, each of Andrew's points must be inside the rectangle or on its boundary.
# 
# Return the area of the smallest possible rectangle Andrew can draw.
# 
# DEFINITION
# Class:BoundingBox
# Method:smallestArea
# Parameters:tuple (integer), tuple (integer)
# Returns:integer
# Method signature:def smallestArea(self, X, Y):
# 
# 
# CONSTRAINTS
# -X will have between 2 and 50 elements, inclusive.
# -X and Y will have the same number of elements.
# -Each element of X and Y will be between -100 and 100, inclusive.
# -The points described by X and Y will not be in a straight line horizontally or vertically. That is, the smallest rectangle will have a positive area.
# 
# 
# EXAMPLES
# 
# 0)
# {0,1}
# {1,0}
# 
# Returns: 1
# 
# 
# 
# 1)
# {0,-2,-1}
# {-1,-1,-2}
# 
# Returns: 2
# 
# 
# 
# 2)
# {0,0,1,0,-1,2}
# {0,1,2,-2,0,-1}
# 
# Returns: 12
# 
# 
# 
# 3)
# {9,-88,-40,98,-55,41,-38}
# {-65,56,-67,7,-58,33,68}
# 
# Returns: 25110
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

import math
import string

class PowerOfThreeEasy:
  def ableToGet(self, x, y):
    # if self.solve(x, y, 0, 0, 0):
    if self.solve2(x, y):
      return "Possible"
    return "Impossible"


  def solve(self, X, Y, x, y, k):
    if x > X or y > Y:
      return False
    if x == X and y == Y:
      return True

    next = pow(3, k)
    if x < X and self.solve(X, Y, x + next, y, k + 1):
      return True
    if y < Y and self.solve(X, Y, x, y + next, k + 1):
      return True
    return False

  def solve2(self, x, y):
    print self.to3(x) ,(self.to3(y))


  def to3(self, n):
    ans = []
    while n > 0:
      ans.append(str(n % 3))
      n /= 3
    ans.reverse()
    return ''.join(ans)



# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1))
	print(str("]"))
	obj = PowerOfThreeEasy()
	startTime = time.clock()
	answer = obj.ableToGet(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p2) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = 1
p1 = 3
p2 = "Possible"
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = 1
p1 = 1
p2 = "Impossible"
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = 3
p1 = 0
p2 = "Impossible"
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = 1
p1 = 9
p2 = "Impossible"
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 4 -----
p0 = 3
p1 = 10
p2 = "Possible"
all_right = KawigiEdit_RunTest(4, p0, p1, True, p2) and all_right
# ------------------

# ----- test 5 -----
p0 = 1093
p1 = 2187
p2 = "Possible"
all_right = KawigiEdit_RunTest(5, p0, p1, True, p2) and all_right
# ------------------

# ----- test 6 -----
p0 = 0
p1 = 0
p2 = "Possible"
all_right = KawigiEdit_RunTest(6, p0, p1, True, p2) and all_right
# ------------------


# ----- test 6 -----
p0 = 48427561
p1 = 145282683
p2 = "Possible"
all_right = KawigiEdit_RunTest(6, p0, p1, True, p2) and all_right
# ------------------

# ----- test 6 -----
p0 = 1000000000
p1 = 1000000000
p2 = "Possible"
all_right = KawigiEdit_RunTest(6, p0, p1, True, p2) and all_right
# ------------------


# ----- test 5 -----
p0 = 2187
p1 = 1093
p2 = "Possible"
all_right = KawigiEdit_RunTest(5, p0, p1, True, p2) and all_right
# ------------------


if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Fox Ciel has a robot.
# The robot is located on an infinite plane.
# At the beginning, the robot starts at the coordinates (0, 0).
# The robot can then make several steps.
# The steps are numbered starting from 0.
#
# In each step, Ciel must choose one of two directions for the robot: right (x coordinate increases) or up (y coordinate increases).
# In step k, the robot will move 3^k units in the chosen direction.
# It is not allowed to skip a step.
#
# You are given integers x and y.
# Return "Possible" (quotes for clarity) if it is possible that the robot reaches the point (x,y) after some (possibly zero) steps.
# Otherwise, return "Impossible".
# 
# DEFINITION
# Class:PowerOfThreeEasy
# Method:ableToGet
# Parameters:integer, integer
# Returns:string
# Method signature:def ableToGet(self, x, y):
# 
# 
# CONSTRAINTS
# -x will be between 0 and 1,000,000,000, inclusive.
# -y will be between 0 and 1,000,000,000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# 1
# 3
# 
# Returns: "Possible"
# 
# In step 0 Ciel will send the robot right to (1,0). In step 1 she will send it up to (1,3).
# 
# 1)
# 1
# 1
# 
# Returns: "Impossible"
# 
# 
# 
# 2)
# 3
# 0
# 
# Returns: "Impossible"
# 
# 
# 
# 3)
# 1
# 9
# 
# Returns: "Impossible"
# 
# Note that it is not allowed to move the robot right in step 0, skip step 1, and then move the robot up in step 2.
# 
# 4)
# 3
# 10
# 
# Returns: "Possible"
# 
# 
# 
# 5)
# 1093
# 2187
# 
# Returns: "Possible"
# 
# 
# 
# 6)
# 0
# 0
# 
# Returns: "Possible"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

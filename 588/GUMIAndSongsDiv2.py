import math
import string
import itertools


class GUMIAndSongsDiv2:
    def maxSongs(self, duration, tone, T):
        duration_tones = []
        for i, d in enumerate(duration):
            duration_tones.append((tone[i], d))

        duration_tones.sort()
        n = 0
        for i in xrange(1, len(duration_tones) + 1):
            for duration_tone in itertools.combinations(duration_tones, i):
                accumulate_time = 0
                for index, tuple in enumerate(duration_tone):
                    accumulate_time += tuple[1]
                    if index >= 1:
                        accumulate_time += duration_tone[index][0] - duration_tone[index-1][0]
                if accumulate_time <= T:
                    n = i
                    break
            else:
                break

        return n


# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str(p2))
	print(str("]"))
	obj = GUMIAndSongsDiv2()
	startTime = time.clock()
	answer = obj.maxSongs(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p3))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [3,5,4,11]
p1 = [2,1,3,1]
p2 = 17
p3 = 3
all_right = KawigiEdit_RunTest(0, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 1 -----
p0 = [100,200,300]
p1 = [1,2,3]
p2 = 10
p3 = 0
all_right = KawigiEdit_RunTest(1, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 2 -----
p0 = [1,2,3,4]
p1 = [1,1,1,1]
p2 = 100
p3 = 4
all_right = KawigiEdit_RunTest(2, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 3 -----
p0 = [10,10,10]
p1 = [58,58,58]
p2 = 30
p3 = 3
all_right = KawigiEdit_RunTest(3, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 4 -----
p0 = [8,11,7,15,9,16,7,9]
p1 = [3,8,5,4,2,7,4,1]
p2 = 14
p3 = 1
all_right = KawigiEdit_RunTest(4, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 5 -----
p0 = [5611,39996,20200,56574,81643,90131,33486,99568,48112,97168,5600,49145,73590,3979,94614]
p1 = [2916,53353,64924,86481,44803,61254,99393,5993,40781,2174,67458,74263,69710,40044,80853]
p2 = 302606
p3 = 8
all_right = KawigiEdit_RunTest(5, p0, p1, p2, True, p3) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

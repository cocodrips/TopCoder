import math
import string
import collections
from sets import Set

class AnagramFree:
    def getMaximumSubset(self, S):
        set = []
        for s in S:
            counter = collections.Counter()
            for word in s:
                counter[word] += 1

            if counter not in set:
                set.append(counter)

        return len(set)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str("\"") + str(p0[i]) + str("\""))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = AnagramFree()
	startTime = time.clock()
	answer = obj.getMaximumSubset(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p1))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = ["abcd","abdc","dabc","bacd"]
p1 = 1
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = ["abcd","abac","aabc","bacd"]
p1 = 2
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = ["aa","aaaaa","aaa","a","bbaaaa","aaababaa"]
p1 = 6
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = ["creation","sentence","reaction","sneak","star","rats","snake"]
p1 = 4
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# A string X is an anagram of string Y if X can be obtained by arranging all characters of Y in some order, without removing any characters and without adding new characters. For example, each of the strings "baba", "abab", "aabb" and "abba" is an anagram of "aabb", and strings "aaab", "aab" and "aabc" are not anagrams of "aabb".
# 
# A set of strings is anagram-free if it contains no pair of strings which are anagrams of each other. Given a set of strings S, return the size of its largest anagram-free subset. Note that the entire set is considered a subset of itself.
# 
# DEFINITION
# Class:AnagramFree
# Method:getMaximumSubset
# Parameters:tuple (string)
# Returns:integer
# Method signature:def getMaximumSubset(self, S):
# 
# 
# CONSTRAINTS
# -S will contain between 1 and 50 elements, inclusive.
# -Each element of S will contain between 1 and 50 characters, inclusive.
# -Each element of S will consist of lowercase letters ('a'-'z') only.
# -All elements of S will be distinct.
# 
# 
# EXAMPLES
# 
# 0)
# {"abcd","abdc","dabc","bacd"}
# 
# Returns: 1
# 
# All of the strings in S are anagrams of each other, so no two of them can simultaneously belong to an anagram-free set.
# 
# 1)
# {"abcd","abac","aabc","bacd"}
# 
# Returns: 2
# 
# One of the maximum anagram-free subsets of S is {"abcd","abac"}.
# 
# 2)
# {"aa","aaaaa","aaa","a","bbaaaa","aaababaa"}
# 
# Returns: 6
# 
# Note that strings of different length cannot be anagrams of each other.
# 
# 3)
# {"creation","sentence","reaction","sneak","star","rats","snake"}
# 
# Returns: 4
# 
# 
# 
# END KAWIGIEDIT TESTING

#Powered by KawigiEdit-pfx 2.1.9!

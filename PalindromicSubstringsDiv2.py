import math
import string
import logging

class PalindromicSubstringsDiv2:
    def count(self, S1, S2):
        S1 = tuple(S1)
        S2 = tuple(S2)
        str = ''
        for s1 in S1:
            str += s1
        for s2 in S2:
            str += s2

        cnt = 0
        for i in xrange(len(str)):
            for j in xrange(i + 1, len(str) + 1):
                sub = str[i:j]
                # print i, j, sub
                if self.ispa(sub):
                    cnt += 1
        return cnt


    def ispa(self, str):
        for i in xrange(len(str)/2):
            if str[i] != str[len(str) - 1 -i]:
                return False
        return True


# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str("\"") + str(p0[i]) + str("\""))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str("\"") + str(p1[i]) + str("\""))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = PalindromicSubstringsDiv2()
	startTime = time.clock()
	answer = obj.count(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p2))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = ["a","a",""]
p1 = ["a"]
p2 = 6
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = ["zaz"]
p1 = []
p2 = 4
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = ["top"]
p1 = ["coder"]
p2 = 8
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = []
p1 = ["daata"]
p2 = 7
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = []
p1 = ["aaaaa"]
p2 = 15
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = []
p1 = []
p2 = 0
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Marco recently learned about palindromic strings.
# A palindromic string is a string that reads the same forwards and backwards.
# For example, "radar" and "racecar" are palindromic strings.
#
# Now Marco is excited about palindromic strings.
# In particular, he likes strings that have a lot of palindromic substrings.
# For example, he really likes the string "aaa" because it has 6 palindromic substrings: "a" occurs three times, "aa" occurs twice, and "aaa" occurs once.
#
# Right now, Marco has a string S composed of lowercase letters.
# You are to reconstruct S from the given tuple (string)s S1 and S2 as follows:
#
# Concatenate in order all elements of S1 to make a string A.
# Concatenate in order all elements of S2 to make a string B.
# Finally, concatenate A and B to get S.
#
# 
# 
# Return the number of palindromic substrings in S.
# 
# DEFINITION
# Class:PalindromicSubstringsDiv2
# Method:count
# Parameters:tuple (string), tuple (string)
# Returns:integer
# Method signature:def count(self, S1, S2):
# 
# 
# CONSTRAINTS
# -S1 and S2 will each contain no more than 50 elements.
# -Each element of S1 and S2 will contain no more than 50 characters.
# -S will contain at least 1 character.
# -S will contain only lowercase letters ('a' - 'z').
# 
# 
# EXAMPLES
# 
# 0)
# {"a","a",""}
# {"a"}
# 
# Returns: 6
# 
# This is the example given in the statement, "aaa".
# 
# 1)
# {"zaz"}
# {}
# 
# Returns: 4
# 
# 
# 
# 2)
# {"top"}
# {"coder"}
# 
# Returns: 8
# 
# 
# 
# 3)
# {}
# {"daata"}
# 
# Returns: 7
# 
# There are five palindromic substrings of length 1, one of length 2 ("aa" starting at index 1), and one of length 3 ("ata" starting at index 2).
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

import math
import string

class TheNumberGameDivTwo:
    def find(self, n):
        if self.rec(n):
            return 'John'
        return 'Brus'

    def rec(self, n, memo={}):
        if n in memo:
            return memo[n]
        memo[n] = self.d(n)
        return memo[n]


    def d(self, n):
        array = []
        for i in xrange(2, n):
            if n % i == 0:
                array.append(i)
        if not array:
            return False

        for i in array:
            if not self.rec(n - i):
                return True
        return False



# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0))
	print(str("]"))
	obj = TheNumberGameDivTwo()
	startTime = time.clock()
	answer = obj.find(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p1) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = 6
p1 = "John"
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = 2
p1 = "Brus"
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = 747
p1 = "Brus"
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = 128
p1 = "Brus"
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# John and Brus play a game with a number.
# The game starts with a positive integer n.
# The two players take alternating turns, John starts.
# Each move looks as follows:
# Let C be the current value of the integer.
# The current player has to choose a positive divisor of the number C, other than 1 and C.
# Once he chooses the divisor, he has to subtract it from C.
# The result is the new number with which the other player now starts his move.
# If a player cannot make a valid move, he loses the game.
# 
# 
# For example, if they start with n=15, one possible gameplay can look as follows:
# 
# John takes the number 15, chooses its divisor 3, and decreases the number to 15-3 = 12.
# Brus takes the number 12, chooses its divisor 4, and decreases the number to 12-4 = 8.
# John takes the number 8, chooses its divisor 2, and decreases the number to 8-2 = 6.
# Brus takes the number 6, chooses its divisor 3, and decreases the number to 6-3 = 3.
# John takes the number 3, and as there are no divisors other than 1 and 3, he has no valid move and thus he loses the game.
# 
# 
# 
# You are given the integer n.
# Assume that both players use the optimal strategy while playing the game.
# Return "John" (quotes for clarity) if John wins the game and "Brus" otherwise.
# 
# 
# DEFINITION
# Class:TheNumberGameDivTwo
# Method:find
# Parameters:integer
# Returns:string
# Method signature:def find(self, n):
# 
# 
# CONSTRAINTS
# -n will be between 1 and 1000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# 6
# 
# Returns: "John"
# 
# John has two possible moves: either decrease 6 by 2 or decrease 6 by 3.
# If he chooses the second option, Brus will have no possible moves, hence John will win the game.
# 
# 1)
# 2
# 
# Returns: "Brus"
# 
# 
# 
# 2)
# 747
# 
# Returns: "Brus"
# 
# 
# 
# 3)
# 128
# 
# Returns: "Brus"
# 
# 
# 
# END KAWIGIEDIT TESTING

#Powered by KawigiEdit-pfx 2.1.9!

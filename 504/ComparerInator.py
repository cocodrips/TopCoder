import math
import string

class ComparerInator:
  def makeProgram(self, A, B, wanted):
    flag = [True for i in xrange(4)]
    for a, b, w in zip(A, B, wanted):
      if w != a and flag[0]:
        flag[0] = False
      if w != b and flag[1]:
        flag[1] = False
      if w != max(a, b) and flag[2]:
        flag[2] = False
      if w != min(a, b) and flag[3]:
        flag[3] = False

    for i in xrange(4):
      if flag[i]:
        if i < 2:
          return 1
        else:
          return 7
    return -1


# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p2)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p2[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = ComparerInator()
	startTime = time.clock()
	answer = obj.makeProgram(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p3))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True


# ----- test 0 -----
p0 = [1]
p1 = [2]
p2 = [2]
p3 = 1
all_right = KawigiEdit_RunTest(0, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 1 -----
p0 = [1,3]
p1 = [2,1]
p2 = [2,3]
p3 = 7
all_right = KawigiEdit_RunTest(1, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 2 -----
p0 = [1,3,5]
p1 = [2,1,7]
p2 = [2,3,5]
p3 = -1
all_right = KawigiEdit_RunTest(2, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 3 -----
p0 = [1,3,5]
p1 = [2,1,7]
p2 = [1,3,5]
p3 = 1
all_right = KawigiEdit_RunTest(3, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 4 -----
p0 = [1,2,3,4,5,6,7,8,9,10,11]
p1 = [5,4,7,8,3,1,1,2,3,4,6]
p2 = [1,2,3,4,3,1,1,2,3,4,6]
p3 = 7
all_right = KawigiEdit_RunTest(4, p0, p1, p2, True, p3) and all_right
# ------------------

# ----- test 5 -----
p0 = [1,5,6,7,8]
p1 = [1,5,6,7,8]
p2 = [1,5,6,7,8]
p3 = 1
all_right = KawigiEdit_RunTest(5, p0, p1, p2, True, p3) and all_right
# ------------------

if (all_right):
	print(str("You're a stud (at least on the example cases)!"))
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Comparer-inator is a very simple language that is specialized in comparisons. It takes an expression and returns the result. There are only two kinds of expressions: a variable name or a tertiary operator inspired by C syntax (which is also used in many languages like Java, C++, and C#). We are interested to use this language to process two tuple (integer)s, A and B to generate the tuple (integer) wanted as a result. We have previously found that there are four candidate programs that could be an optimal way to solve the issue we have. Each of the programs takes two arguments a and b.
#
# "a" : This program will return the given argument a.
# "b" : This program will return the given argument b.
# "a<b?a:b" : If a is less than b, the program will return a, else it will return b.
# "a<b?b:a" : If a is less than b, the program will return b, else it will return a.
#
#
# Given tuple (integer) A, B and wanted find the shortest of the four candidate programs that, for every index i, will return wanted[i] after being provided a=A[i] and b=B[i] as arguments. Return the length of the shortest program. If no candidate program can do the required job, return -1 instead.
#
# DEFINITION
# Class:ComparerInator
# Method:makeProgram
# Parameters:tuple (integer), tuple (integer), tuple (integer)
# Returns:integer
# Method signature:def makeProgram(self, A, B, wanted):
# 
# 
# CONSTRAINTS
# -A will contain between 1 and 50 elements, inclusive.
# -B and wanted will each contain the same number of elements as A.
# -Each element of A, B and wanted will be between 1 and 1000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1}
# {2}
# {2}
# 
# Returns: 1
# 
# "b" and "a<b?b:a" (quotes for clarity) are the two programs that will return 2 after being given a=1, b=2 as arguments. "b" is the shortest of them.
# 
# 
# 1)
# {1,3}
# {2,1}
# {2,3}
# 
# Returns: 7
# 
# "a<b?b:a" is the only program that will return 2 after being provided a=1, b=2 and will also
# return 3 after being provided a=3, b=1.
# 
# 2)
# {1,3,5}
# {2,1,7}
# {2,3,5}
# 
# Returns: -1
# 
# None of the four programs can do the job correctly.
# 
# 3)
# {1,3,5}
# {2,1,7}
# {1,3,5}
# 
# Returns: 1
# 
# 
# 
# 4)
# {1,2,3,4,5,6,7,8,9,10,11}
# {5,4,7,8,3,1,1,2,3,4,6}
# {1,2,3,4,3,1,1,2,3,4,6}
# 
# Returns: 7
# 
# 
# 
# 5)
# {1,5,6,7,8}
# {1,5,6,7,8}
# {1,5,6,7,8}
# 
# Returns: 1
# 
# "a", "b", "a<b?a:b" and "a<b?b:a" are all valid programs that will give the wanted result. "a" and "b" are the shortest.
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!
